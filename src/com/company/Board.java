package com.company;

import javax.swing.JOptionPane;
import java.io.*;
import java.nio.file.FileSystem;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;

import static java.nio.file.StandardOpenOption.APPEND;
import static java.nio.file.StandardOpenOption.CREATE;

public class Board {

    private String[][] board = {{"01","02","03","04","05","06","07","08","09","10",},
                                {"11","12","13","14","15","16","17","18","19","20",},
                                {"21","22","23","24","25","26","27","28","29","30",},
                                {"31","32","33","34","35","36","37","38","39","40",},
                                {"41","42","43","44","45","46","47","48","49","50",},
                                {"51","52","53","54","55","56","57","58","59","60",},
                                {"61","62","63","64","65","66","67","68","69","70",},
                                {"71","72","73","74","75","76","77","78","79","80",}};

    private String[][] shipBoard;

    //private boolean hit = false;

    private int compInput;

    private String compStr = "";

    public Board(String[][] a){
        shipBoard = a;
    }

    /**
     * This constructor loads a previously saved BattleShip game.
     * @param a is a variable that allows this constructor to run.
     * @param array is the shipBoard associated with this saved file.
     */
    public Board(String a, String[][] array){
        shipBoard = array;

        File file;
        String fileName;
        if(a.equals("loadUser")){
            fileName = "UserBoard";
        }
        else{
            fileName = "CompBoard";
        }

        file = new File("/Users/Naveen/Desktop/JavaAppSaveLogs/BattleShipSaveLog/" + fileName + ".txt");

        int row = 0;
        int col = 0;

        try {
            BufferedReader br = new BufferedReader(new FileReader(file));
            String st = br.readLine();

            for(int i = 0; i < st.length() - 2 ; i = i + 3) {
                board[row][col] = st.substring(i, i + 2);
                    if (col / 9 == 1) {
                        row = row + 1;
                        col = 0;
                    }
                    else {
                        col = col + 1;
                    }
            }
        }
        catch(FileNotFoundException e){
            System.out.println("Error");
        }
        catch(IOException e){
            System.out.println("error");
        }
    }

    /**
     * Used to change player's and computer's board as well as display message
     * If player selects same position, they will be prompted to select a ne position.
     * @param a is either the user input or a random number generated by the computer
     */
    public void shot(String a){
        boolean cond = true;

        try {
            for (int i = 0; i < board.length; i++) {
                for (int j = 0; j < board[0].length; j++) {
                    if (a.equals(board[i][j])) {
                        if (a.equals(shipBoard[i][j])) {
                            JOptionPane.showMessageDialog(null, "Missed!", "Battle Ships", JOptionPane.INFORMATION_MESSAGE);
                            board[i][j] = "EE";
                            //hit = false;
                        } else if (shipBoard[i][j].equals("XX")) {
                            JOptionPane.showMessageDialog(null, "HIT", "Battle Ships", JOptionPane.INFORMATION_MESSAGE);
                            board[i][j] = "XX";
                            //hit = true;
                        }

                        cond = false;
                    }
                }
            }

            if (cond) {
                throw (new RepeatedNumberException());
            }
        }
            catch (RepeatedNumberException e) {
                a = JOptionPane.showInputDialog(null,
                        "Enter a row position \n" + display());
                shot(a);
            }
    }


    /**
     * Used to generate a random position for computer to shoot at or uses AI to continue hitting
     */
    public void compShot(){
        boolean cond = true;

        //if(hit){
        //  hit();
        //}
        //else{
        while(cond){
            compInput = (int) (Math.random() * 80 + 1);
            compStr = Integer.toString(compInput);
            cond = check(compStr);
        }
        shot(compStr);
        //}
    }

    /**
     * Used to make sure the computer doesn't shoot the same spot
     * @param a is a random position the computer generates.
     * @return whether the position has already been shot at.
     */
    public boolean check(String a){
        for(String[] row : board){
            for(String pos : row){
                if(a.equals(pos)){
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * Attempt to improve AI to make computer's moves smarter.
     * PROBLEM: Unexpected termination after computer makes move
     */
/*  public void hit(){
        boolean cond = true;

        while(cond){
            int path = (int) (Math.random() * 3);
            try{
                if(path == 3){
                    compStr = Integer.toString(compInput - 10);
                }
                else if(path == 2){
                    compStr = Integer.toString(compInput + 10);
                }
                else if(path == 1){
                    compStr = Integer.toString(compInput - 1);
                }
                else if(path == 0){
                    compStr = Integer.toString(compInput + 1);
                }

                if(!(check(compStr))){
                    shot(compStr);
                    cond = false;
                }
            }
            catch(ArrayIndexOutOfBoundsException e){
            }
        }
    } */

    /**
     * Used to display the board
     * @return board array for player's view
     */
    public String display(){
        return (
                board[0][0] + "   " + board[0][1] + "   " + board[0][2] + "   " + board[0][3] + "   " + board[0][4] + "   " + board[0][5] + "   " + board[0][6] + "   " + board[0][7] + "   " + board[0][8] + "   " + board[0][9] + "\n"
                        + board[1][0] + "   " + board[1][1] + "   " + board[1][2] + "   " + board[1][3] + "   " + board[1][4] + "   " + board[1][5] + "   " + board[1][6] + "   " + board[1][7] + "   " + board[1][8] + "   " + board[1][9] + "\n"
                        + board[2][0] + "   " + board[2][1] + "   " + board[2][2] + "   " + board[2][3] + "   " + board[2][4] + "   " + board[2][5] + "   " + board[2][6] + "   " + board[2][7] + "   " + board[2][8] + "   " + board[2][9] + "\n"
                        + board[3][0] + "   " + board[3][1] + "   " + board[3][2] + "   " + board[3][3] + "   " + board[3][4] + "   " + board[3][5] + "   " + board[3][6] + "   " + board[3][7] + "   " + board[3][8] + "   " + board[3][9] + "\n"
                        + board[4][0] + "   " + board[4][1] + "   " + board[4][2] + "   " + board[4][3] + "   " + board[4][4] + "   " + board[4][5] + "   " + board[4][6] + "   " + board[4][7] + "   " + board[4][8] + "   " + board[4][9] + "\n"
                        + board[5][0] + "   " + board[5][1] + "   " + board[5][2] + "   " + board[5][3] + "   " + board[5][4] + "   " + board[5][5] + "   " + board[5][6] + "   " + board[5][7] + "   " + board[5][8] + "   " + board[5][9] + "\n"
                        + board[6][0] + "   " + board[6][1] + "   " + board[6][2] + "   " + board[6][3] + "   " + board[6][4] + "   " + board[6][5] + "   " + board[6][6] + "   " + board[6][7] + "   " + board[6][8] + "   " + board[6][9] + "\n"
                        + board[7][0] + "   " + board[7][1] + "   " + board[7][2] + "   " + board[7][3] + "   " + board[7][4] + "   " + board[7][5] + "   " + board[7][6] + "   " + board[7][7] + "   " + board[7][8] + "   " + board[7][9] + "\n"
        );
    }

    /**
     * Used to check if either the player or computer won.
     * Will terminate program after displaying a message.
     * @param a is a string that is used to distinguish between whether a method is for the player or computer.
     */
    public void checkGame(String a){
        int count = 0;
        int gameCount = 0;

        for(String[] row : shipBoard){
            for(String pos : row){
                if(pos.equals("XX")){
                    count++;
                }
            }
        }

        for(String[] row : board){
            for(String pos : row){
                if(pos.equals("XX")){
                    gameCount++;
                }
            }
        }

        if(count == gameCount){
            if(a.equals("user")){
                JOptionPane.showMessageDialog(null, "Congratulations! You win!", "Battle Ships", JOptionPane.INFORMATION_MESSAGE);
            }
            if(a.equals("comp")){
                JOptionPane.showMessageDialog(null, "The computer destroyed your ships. You lost :(", "Battle Ships", JOptionPane.INFORMATION_MESSAGE);
            }
            System.exit(0);
        }
    }

    /**
     * Saves board of player and computer for later use.
     * @param select is a variable that determines whether the computer or player board is being saved.
     */
    public void save(int select){
        String fileName;

        if (select == 0){
            fileName = "UserBoard";
        }
        else{
            fileName = "CompBoard";
        }

        FileSystem fs = FileSystems.getDefault();
        Path file = fs.getPath("/Users/Naveen/Desktop/JavaAppSaveLogs/BattleShipSaveLog/" + fileName + ".txt");

        OutputStream output ;
        OutputStream initializer;
        BufferedWriter writer;

        try{
            initializer = new BufferedOutputStream(Files.newOutputStream(file, CREATE));

            Files.delete(file);

            output = new BufferedOutputStream(Files.newOutputStream(file, CREATE, APPEND));
            writer = new BufferedWriter(new OutputStreamWriter(output));


            for(int i = 0; i < 8; i++){
                for(int j = 0; j < 10; j++){
                    String data = board[i][j];
                    writer.write(data, 0, data.length());
                    writer.write(",");
                }
            }
            writer.close();

        }

        catch(IOException e){
            System.out.println("Error");
        }
    }

}
